import java.util.*;

public class Main {
    public static int minScoreTriangulation(int[] values) {
        int n = values.length;
        int[][] dp = new int[n][n];

        // dp[i][j] = 0 when j <= i+1 (less than 3 vertices, no triangle)

        for (int len = 3; len <= n; len++) {      // length of subpolygon
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = Integer.MAX_VALUE;

                // try every possible middle vertex k
                for (int k = i + 1; k < j; k++) {
                    int cost = dp[i][k] + dp[k][j] + values[i] * values[k] * values[j];
                    dp[i][j] = Math.min(dp[i][j], cost);
                }
            }
        }

        return dp[0][n - 1];
    }

    public static void main(String[] args) {
        int[] values1 = {1, 2, 3};
        int[] values2 = {3, 7, 4, 2};
        int[] values3 = {1, 3, 1, 4, 1, 5};

        System.out.println("Test 1: " + minScoreTriangulation(values1)); // Expected 6
        System.out.println("Test 2: " + minScoreTriangulation(values2)); // Expected 66
        System.out.println("Test 3: " + minScoreTriangulation(values3)); // Expected 13
    }
}